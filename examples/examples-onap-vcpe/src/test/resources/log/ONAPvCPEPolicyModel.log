/root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.isFalse;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

executor.logger.info("****")
executor.logger.info(aaiResponse)

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.isFalse;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

var genericVnfIInfo = responseItem.get
AaiNqInventoryResponseItem responseItem = new AaiNqInventoryResponseItem();
responseItem.setModelName("vCPE");

AaiNqGenericVnf genericVnf = new AaiNqGenericVnf();
genericVnf.setResourceVersion("1");
genericVnf.setVnfName("vCPEInfraVNF13");
genericVnf.setProvStatus("PREPROV");
genericVnf.setIsClosedLoopDisabled(false);
genericVnf.setVnfType("vCPEInfraService10/vCPEInfraService10 0");
genericVnf.setInMaint(false);
genericVnf.setServiceId("5585fd2c-ad0d-4050-b0cf-dfe4a03bd01f");
genericVnf.setVnfId("b4fe00ac-1da6-4b00-ac0d-8e8300db39e1");

responseItem.setGenericVnf(genericVnf);

AaiNqVfModule vfModule = new AaiNqVfModule();
vfModule.setOrchestrationStatus("Created");

responseItem.setVfModule(vfModule);

AaiNqResponse response = new AaiNqResponse();
for (var iterator = response.getInventoryResponseItems().iterator; iterator.hasNext(): ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    executor.logger.info("***");
    executor.logger.info(responseItem);
}
var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

aaiInfo.put("genericVnfResourceVersion",      aaiResponse.get("generic-vnf.resource-version"));
aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));

vcpeClosedLoopStatus.put("AAI", aaiInfo);

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator; iterator.hasNext(): ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    executor.logger.info("***");
    executor.logger.info(responseItem);
}
var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

aaiInfo.put("genericVnfResourceVersion",      aaiResponse.get("generic-vnf.resource-version"));
aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));

vcpeClosedLoopStatus.put("AAI", aaiInfo);

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator; iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    executor.logger.info("***");
    executor.logger.info(responseItem);
}
var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

aaiInfo.put("genericVnfResourceVersion",      aaiResponse.get("generic-vnf.resource-version"));
aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));

vcpeClosedLoopStatus.put("AAI", aaiInfo);

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator; iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    executor.logger.info("***");
    executor.logger.info(responseItem);
}
var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

aaiInfo.put("genericVnfResourceVersion",      aaiResponse.get("generic-vnf.resource-version"));
aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));

vcpeClosedLoopStatus.put("AAI", aaiInfo);

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator; iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    executor.logger.info("***");
    executor.logger.info(responseItem);
}
var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

aaiInfo.put("genericVnfResourceVersion",      aaiResponse.get("generic-vnf.resource-version"));
aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));

vcpeClosedLoopStatus.put("AAI", aaiInfo);

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator; iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    executor.logger.info("***");
    executor.logger.info(responseItem);
}
var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

aaiInfo.put("genericVnfResourceVersion",      aaiResponse.get("generic-vnf.resource-version"));
aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));

vcpeClosedLoopStatus.put("AAI", aaiInfo);

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    executor.logger.info("***");
    executor.logger.info(responseItem);
}
var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

aaiInfo.put("genericVnfResourceVersion",      aaiResponse.get("generic-vnf.resource-version"));
aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));

vcpeClosedLoopStatus.put("AAI", aaiInfo);

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion();
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsControlLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getordhestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsControlLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getordhestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getordhestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var aaiResponse = executor.inFields.get("APPCLCMResponseEvent");

executor.logger.info("*****");
executor.logger.info(aaiResponse);

var requestID = uuidType.fromString(executor.inFields.get("correlation-id"));
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestID = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("vnfID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestID = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestID = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    var notification = "OPERATION: VNF RESTART WITH RETURN CODE "
            + executor.inFields.get("body").get("output").get("status").get("code") + ", "
            + executor.inFields.get("body").get("output").get("status").get("message");

    vcpeClosedLoopStatus.put("notification", notification);
    vcpeClosedLoopStatus.put("notificationTime", executor.inFields.get("body").get("output").get("common_DasH_header")
            .get("timestamp"));

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestID = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID.toString());

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (appcResponse.getBody().getStatus() == 400) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestID = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (appcResponse.getBody().getStatus() == 400) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID"), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestID = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestID);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (appcResponse.getBody().getStatus() == 400) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (appcResponse.getBody().getStatus() == 400) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestID);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (appcResponse.getBody().getStatus() == 400) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    executor.logger.info("***");
    executor.logger.info(appcResponse.getBody().getStatus());
    
    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    executor.logger.info("***");
    executor.logger.info(appcResponse.getBody().getStatus());
    
    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification", "VCPE NOTIFICATION HAS BEEN ABATED");
vcpeClosedLoopStatus.put("notificationTime", new Date().toISOString());

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation ahs been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

//vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.SUCCESS);
//vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
//vcpeClosedLoopStatus.put("message",          "situation ahs been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
//vcpeClosedLoopStatus.put("message",          "situation ahs been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation hAs been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation hAs been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> /root> #-------------------------------------------------------------------------------
/root> # ============LICENSE_START=======================================================
/root> #  Copyright (C) 2016-2018 Ericsson. All rights reserved.
/root> # ================================================================================
/root> # Licensed under the Apache License, Version 2.0 (the "License");
/root> # you may not use this file except in compliance with the License.
/root> # You may obtain a copy of the License at
/root> # 
/root> #      http://www.apache.org/licenses/LICENSE-2.0
/root> # 
/root> # Unless required by applicable law or agreed to in writing, software
/root> # distributed under the License is distributed on an "AS IS" BASIS,
/root> # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/root> # See the License for the specific language governing permissions and
/root> # limitations under the License.
/root> # 
/root> # SPDX-License-Identifier: Apache-2.0
/root> # ============LICENSE_END=========================================================
/root> #-------------------------------------------------------------------------------
/root> 
/root> model create name=ONAPvCPEPolicyModel
result: SUCCESS

/root> 
/root> schema create name=SimpleStringType  flavour=Java schema=java.lang.String
result: SUCCESS

/root> schema create name=SimpleLongType    flavour=Java schema=java.lang.Long
result: SUCCESS

/root> schema create name=SimpleBooleanType flavour=Java schema=java.lang.Boolean
result: SUCCESS

/root> schema create name=UUIDType          flavour=Java schema=java.util.UUID
result: SUCCESS

/root> 
/root> schema create name=VirtualControlLoopEventType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopEvent
result: SUCCESS

/root> schema create name=VirtualControlLoopNotificationType flavour=Java schema=org.onap.policy.controlloop.VirtualControlLoopNotification
result: SUCCESS

/root> 
/root> schema create name=AAIServiceNamedQueryRequestType flavour=Java schema=org.onap.policy.aai.AaiNqRequest
result: SUCCESS

/root> schema create name=AAIServiceNamedQueryResponseType flavour=Java schema=org.onap.policy.aai.AaiNqResponse
result: SUCCESS

/root> 
/root> schema create name=APPCLCMRequestType flavour=Java schema=org.onap.policy.appclcm.LcmRequestWrapper
result: SUCCESS

/root> schema create name=APPCLCMResponseType flavour=Java schema=org.onap.policy.appclcm.LcmResponseWrapper
result: SUCCESS

/root> 
/root> schema create name=GuardDecisionAttributesType flavour=Avro schema=LS
{
    "type": "record",
    "name": "GuardDecisionAttributes_Type",
    "namespace": "org.onap.policy.apex.onap.vcpe",
    "fields": [
        {
            "name": "actor",
            "type": "string"
        },
        {
            "name": "recipe",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "clname",
            "type": "string"
        }
    ]
}

LE
result: SUCCESS

/root> 
/root> schema create name=VCPEClosedLoopStatusType flavour=Avro schema=LS
{
    "type": "record",
    "name": "VCPEClosedLoopStatus",
    "fields": [
        {
            "name": "AAI",
            "type": {
                "type": "record",
                "name": "VCPE_AAI_Type",
                "namespace": "org.onap.policy.apex.onap.vcpe",
                "fields": [
                    {
                        "name": "genericVnfResourceVersion",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfName",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfProvStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfIsClosedLoopDisabled",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfOrchestrationStatus",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfType",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfInMaint",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfServiceId",
                        "type": "string"
                    },
                    {
                        "name": "genericVnfVnfId",
                        "type": "string"
                    }
                ]
            }
        },
        {
            "name": "closedLoopAlarmStart",
            "type": "long"
        },
        {
            "name": "closedLoopAlarmEnd",
            "type": "long"
        },
        {
            "name": "closedLoopControlName",
            "type": "string"
        },
        {
            "name": "version",
            "type": "string"
        },
        {
            "name": "requestID",
            "type": "string"
        },
        {
            "name": "closedLoopEventClient",
            "type": "string"
        },
        {
            "name": "closedLoopEventStatus",
            "type": "string"
        },
        {
            "name": "target_type",
            "type": "string"
        },
        {
            "name": "target",
            "type": "string"
        },
        {
            "name": "from",
            "type": "string"
        },
        {
            "name": "policyScope",
            "type": "string"
        },
        {
            "name": "policyName",
            "type": "string"
        },
        {
            "name": "policyVersion",
            "type": "string"
        },
        {
            "name": "notification",
            "type": "string"
        },
        {
            "name": "notificationTime",
            "type": "string"
        },
        {
            "name": "message",
            "type": "string"
        }
    ]
}
LE
result: SUCCESS

/root> 
/root> album create name=VCPEClosedLoopStatusAlbum scope=policy writable=true schemaName=VCPEClosedLoopStatusType
result: SUCCESS

/root> 
/root> album create name=ControlLoopExecutionIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> album create name=RequestIDVNFIDAlbum scope=policy writable=true schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=VirtualControlLoopEvent version=1.0.2 nameSpace=org.onap.policy.apex.onap.vcpe source=DCAE target=APEX
result: SUCCESS

/root> event parameter create name=VirtualControlLoopEvent parName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> event create name=VCPEStateUpdatedEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=requestID schemaName=UUIDType
result: SUCCESS

/root> event parameter create name=VCPEStateUpdatedEvent parName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> event create name=GuardRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardRequestEvent parName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> event parameter create name=GuardRequestEvent parName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=GuardResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> 
/root> event parameter create name=GuardResponseEvent parName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> event parameter create name=GuardResponseEvent parName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFRequestEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFRequestEvent parName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> event create name=APPCRestartVNFResponseEvent version="2.0.0" nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APPC
result: SUCCESS

/root> event parameter create name=APPCRestartVNFResponseEvent parName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> event create name=ControlLoopLogEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=APEX
result: SUCCESS

/root> event parameter create name=ControlLoopLogEvent parName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryRequestEvent nameSpace=org.onap.policy.apex.onap.vcpe source=APEX target=AAI
result: SUCCESS

/root> event parameter create name=AAINamedQueryRequestEvent parName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> event create name=AAINamedQueryResponseEvent nameSpace=org.onap.policy.apex.onap.vcpe source=AAI target=APEX
result: SUCCESS

/root> event parameter create name=AAINamedQueryResponseEvent parName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task create name=GetVCPEStateTask
result: SUCCESS

/root> 
/root> task inputfield create name=GetVCPEStateTask fieldName=VirtualControlLoopEvent schemaName=VirtualControlLoopEventType
result: SUCCESS

/root> 
/root> task outputfield create name=GetVCPEStateTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GetVCPEStateTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GetVCPEStateTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=GetVCPEStateTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);


var clEventType = Java.type("org.onap.policy.controlloop.VirtualControlLoopEvent");
var longType = Java.type("java.lang.Long");
var uuidType = Java.type("java.util.UUID");

var clEvent = executor.inFields.get("VirtualControlLoopEvent");

executor.logger.info(clEvent.getClosedLoopControlName());

var requestID = clEvent.getRequestId();
var vnfID = uuidType.fromString(clEvent.getAai().get("generic-vnf.vnf-id"));

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID);

if (vcpeClosedLoopStatus == null) {
    executor.logger.info("Creating context information for new vCPE VNF \"" + vnfID.toString() + "\"");

    vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewInstance();

    vcpeClosedLoopStatus.put("closedLoopControlName", clEvent.getClosedLoopControlName());
    vcpeClosedLoopStatus.put("closedLoopAlarmStart",  clEvent.getClosedLoopAlarmStart());
    vcpeClosedLoopStatus.put("closedLoopEventClient", clEvent.getClosedLoopEventClient());
    vcpeClosedLoopStatus.put("closedLoopEventStatus", clEvent.getClosedLoopEventStatus());
    vcpeClosedLoopStatus.put("version",               clEvent.getVersion());
    vcpeClosedLoopStatus.put("requestID",             clEvent.getRequestId());
    vcpeClosedLoopStatus.put("target_type",           clEvent.getTargetType());
    vcpeClosedLoopStatus.put("target",                clEvent.getTarget());
    vcpeClosedLoopStatus.put("from",                  clEvent.getFrom());
    vcpeClosedLoopStatus.put("policyScope",           "vCPE");
    vcpeClosedLoopStatus.put("policyName",            "ONAPvCPEPolicyModel");
    vcpeClosedLoopStatus.put("policyVersion",         "0.0.1");
    vcpeClosedLoopStatus.put("notification",          org.onap.policy.controlloop.ControlLoopNotificationType.ACTIVE);
    vcpeClosedLoopStatus.put("notificationTime",      java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      clEvent.getAai().get("generic-vnf.resource-version"));
    aaiInfo.put("genericVnfVnfName",              clEvent.getAai().get("generic-vnf.vnf-name"));
    aaiInfo.put("genericVnfProvStatus",           clEvent.getAai().get("generic-vnf.prov-status"));
    aaiInfo.put("genericVnfIsClosedLoopDisabled", clEvent.getAai().get("generic-vnf.is-closed-loop-disabled"));
    aaiInfo.put("genericVnfOrchestrationStatus",  clEvent.getAai().get("generic-vnf.orchestration-status"));
    aaiInfo.put("genericVnfVnfType",              clEvent.getAai().get("generic-vnf.vnf-type"));
    aaiInfo.put("genericVnfInMaint",              clEvent.getAai().get("generic-vnf.in-maint"));
    aaiInfo.put("genericVnfServiceId",            clEvent.getAai().get("generic-vnf.service-id"));
    aaiInfo.put("genericVnfVnfId",                clEvent.getAai().get("generic-vnf.vnf-id"));
    
    vcpeClosedLoopStatus.put("AAI", aaiInfo);

    if (clEvent.getClosedLoopAlarmEnd() != null) {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", clEvent.getClosedLoopAlarmEnd());
    } else {
        vcpeClosedLoopStatus.put("closedLoopAlarmEnd", java.time.Instant.EPOCH);
    }

    executor.getContextAlbum("VCPEClosedLoopStatusAlbum").put(vnfID.toString(), vcpeClosedLoopStatus);

    executor.logger.info("Created context information for new vCPE VNF \"" + vnfID.toString() + "\"");
}

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AbatedTask
result: SUCCESS

/root> 
/root> task inputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AbatedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AbatedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AbatedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=AbatedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.FINAL_SUCCESS);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));
vcpeClosedLoopStatus.put("message",          "situation has been abated");

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=GuardRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=GuardRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardRequestTask fieldName=decisionAttributes schemaName=GuardDecisionAttributesType
result: SUCCESS

/root> task outputfield create name=GuardRequestTask fieldName=onapName           schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task contextref create name=GuardRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardDecisionAttributes = executor.subject.getOutFieldSchemaHelper("decisionAttributes").createNewInstance();

guardDecisionAttributes.put("actor", "APPC");
guardDecisionAttributes.put("recipe", "Restart");
guardDecisionAttributes.put("target", executor.inFields.get("vnfID").toString());
guardDecisionAttributes.put("clname", "APEXvCPEImplementation");

executor.logger.info(guardDecisionAttributes);

executor.outFields.put("decisionAttributes", guardDecisionAttributes);
executor.outFields.put("onapName", "APEX");

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=GuardResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=GuardResponseTask fieldName=decision  schemaName=SimpleStringType
result: SUCCESS

/root> task inputfield create name=GuardResponseTask fieldName=details   schemaName=SimpleStringType
result: SUCCESS

/root> 
/root> task outputfield create name=GuardResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=GuardResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=GuardResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=GuardResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=GuardResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var guardResult = executor.inFields.get("decision");

if (guardResult === "PERMIT") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_PERMIT");
} else if (guardResult === "DENY") {
    vcpeClosedLoopStatus.put("notification", "OPERATION: GUARD_DENY");
} else {
    executor.message = "guard result must be either \"PERMIT\" or \"DENY\"";
    returnValue = executor.FALSE;
}

var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=DeniedTask
result: SUCCESS

/root> 
/root> task inputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=DeniedTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=DeniedTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=DeniedTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=DeniedTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.REJECTED);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=APPCRestartVNFRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFRequestTask fieldName=APPCLCMRequestEvent schemaName=APPCLCMRequestType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFRequestTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var appcRequest = new org.onap.policy.appclcm.LcmRequestWrapper;
appcRequest.setBody(new org.onap.policy.appclcm.LcmRequest);
appcRequest.getBody().setCommonHeader(new org.onap.policy.appclcm.LcmCommonHeader);

appcRequest.setVersion("2.0.0");
appcRequest.setRpcName("restart");
appcRequest.setCorrelationId(executor.inFields.get("requestID"));
appcRequest.setType("request");

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(executor.inFields.get("vnfID").toString());

appcRequest.getBody().getCommonHeader().setTimeStamp(java.time.Instant.now());
appcRequest.getBody().getCommonHeader().setApiVer("5.00");
appcRequest.getBody().getCommonHeader().setOriginatorId(executor.inFields.get("requestID").toString());
appcRequest.getBody().getCommonHeader().setRequestId(executor.inFields.get("requestID"));
appcRequest.getBody().getCommonHeader().setSubRequestId("1");
appcRequest.getBody().getCommonHeader().getFlags().put("ttl", "10000");
appcRequest.getBody().getCommonHeader().getFlags().put("force", "TRUE");
appcRequest.getBody().getCommonHeader().getFlags().put("mode", "EXCLUSIVE");

appcRequest.getBody().setActionIdentifiers(new java.util.HashMap());
appcRequest.getBody().getActionIdentifiers().put("vnf-id", executor.inFields.get("vnfID").toString());

executor.getContextAlbum("RequestIDVNFIDAlbum").put(executor.inFields.get("requestID").toString(), executor.inFields.get("vnfID"));

vcpeClosedLoopStatus.put("notification",     org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION);
vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

executor.outFields.put("APPCLCMRequestEvent", appcRequest);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=APPCRestartVNFResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=APPCRestartVNFResponseTask fieldName=APPCLCMResponseEvent schemaName=APPCLCMResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=APPCRestartVNFResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=APPCRestartVNFResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=APPCRestartVNFResponseTask albumName=RequestIDVNFIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=APPCRestartVNFResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var uuidType = Java.type("java.util.UUID");
var integerType = Java.type("java.lang.Integer");

var appcResponse = executor.inFields.get("APPCLCMResponseEvent");

var requestIDString = appcResponse.getCorrelationId();
var vnfID = executor.getContextAlbum("RequestIDVNFIDAlbum").remove(requestIDString);

var returnValue = executor.isTrue;

if (vnfID != null) {
    var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
    var requestId = vcpeClosedLoopStatus.get("requestID");

    vcpeClosedLoopStatus.put("notificationTime", java.time.ZonedDateTime.now(java.time.ZoneOffset.UTC));

    if (org.onap.policy.appclcm.LcmResponseCode.toResponseValue(appcResponse.getBody().getStatus().getCode()) == org.onap.policy.appclcm.LcmResponseCode.SUCCESS) {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_SUCCESS);
        vcpeClosedLoopStatus.put("message", "vCPE restarted");
    }
    else {
        vcpeClosedLoopStatus.put("notification", org.onap.policy.controlloop.ControlLoopNotificationType.OPERATION_FAILURE);
        vcpeClosedLoopStatus.put("message", "vCPE restart failed");
    }

    executor.outFields.put("requestID", requestId);
    executor.outFields.put("vnfID", vnfID);
} else {
    executor.message = "VNF ID not found in context album for request ID " + requestID;
    returnValue = executor.isFalse
}

executor.logger.info(executor.outFields);

LE
result: SUCCESS

/root> 
/root> task create name=ControlLoopLogTask
result: SUCCESS

/root> 
/root> task inputfield create name=ControlLoopLogTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=ControlLoopLogTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=ControlLoopLogTask fieldName=VirtualControlLoopNotification schemaName=VirtualControlLoopNotificationType
result: SUCCESS

/root> 
/root> task contextref create name=ControlLoopLogTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> task logic create name=ControlLoopLogTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

executor.logger.info("Logging context information for VNF \"" + executor.inFields.get("vnfID") + "\"");

var clNotification = new org.onap.policy.controlloop.VirtualControlLoopNotification();

clNotification.setClosedLoopControlName(vcpeClosedLoopStatus.get("closedLoopControlName"));
clNotification.setClosedLoopAlarmStart(vcpeClosedLoopStatus.get("closedLoopAlarmStart"));
clNotification.setClosedLoopAlarmEnd(vcpeClosedLoopStatus.get("closedLoopAlarmEnd"));
clNotification.setClosedLoopEventClient(vcpeClosedLoopStatus.get("closedLoopEventClient"));
clNotification.setVersion(vcpeClosedLoopStatus.get("version"));
clNotification.setRequestId(vcpeClosedLoopStatus.get("requestID"));
clNotification.setTargetType(vcpeClosedLoopStatus.get("target_type"));
clNotification.setTarget(vcpeClosedLoopStatus.get("target"));
clNotification.setFrom(vcpeClosedLoopStatus.get("from"));
clNotification.setPolicyScope(vcpeClosedLoopStatus.get("policyScope"));
clNotification.setPolicyName(vcpeClosedLoopStatus.get("policyName"));
clNotification.setPolicyVersion(vcpeClosedLoopStatus.get("policyVersion"));
clNotification.setNotification(vcpeClosedLoopStatus.get("notification"));
clNotification.setNotificationTime(vcpeClosedLoopStatus.get("notificationTime"));
clNotification.setMessage(vcpeClosedLoopStatus.get("message"));

var aaiInfo = vcpeClosedLoopStatus.get("AAI");

clNotification.getAai().put("generic-vnf.resource-version",        aaiInfo.get("genericVnfResourceVersion"));      
clNotification.getAai().put("generic-vnf.vnf-name",                aaiInfo.get("genericVnfVnfName"));              
clNotification.getAai().put("generic-vnf.prov-status",             aaiInfo.get("genericVnfProvStatus"));           
clNotification.getAai().put("generic-vnf.is-closed-loop-disabled", aaiInfo.get("genericVnfIsClosedLoopDisabled")); 
clNotification.getAai().put("generic-vnf.orchestration-status",    aaiInfo.get("genericVnfOrchestrationStatus"));  
clNotification.getAai().put("generic-vnf.vnf-type",                aaiInfo.get("genericVnfVnfType"));              
clNotification.getAai().put("generic-vnf.in-maint",                aaiInfo.get("genericVnfInMaint"));              
clNotification.getAai().put("generic-vnf.service-id",              aaiInfo.get("genericVnfServiceId"));            
clNotification.getAai().put("generic-vnf.vnf-id",                  aaiInfo.get("genericVnfVnfId"));                

executor.outFields.put("VirtualControlLoopNotification", clNotification);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=AAILookupRequestTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupRequestTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=AAILookupRequestTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupRequestTask fieldName=AAINamedQueryRequest schemaName=AAIServiceNamedQueryRequestType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupRequestTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupRequestTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupRequestTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var aaiRequest = new org.onap.policy.aai.AaiNqRequest;
aaiRequest.setQueryParameters(new org.onap.policy.aai.AaiNqQueryParameters);
aaiRequest.setInstanceFilters(new org.onap.policy.aai.AaiNqInstanceFilters);

aaiRequest.getQueryParameters().setNamedQuery(new org.onap.policy.aai.AaiNqNamedQuery);
aaiRequest.getQueryParameters().getNamedQuery().setNamedQueryUuid(executor.inFields.get("requestID"));

var genericVnfInstanceFilterMap = new java.util.HashMap();
genericVnfInstanceFilterMap.put("vnf-id", vcpeClosedLoopStatus.get("AAI").get("genericVnfVnfId"));

var genericVnfFilterMap = new java.util.HashMap();
genericVnfFilterMap.put("generic-vnf", genericVnfInstanceFilterMap);

aaiRequest.getInstanceFilters().getInstanceFilter().add(genericVnfFilterMap);

executor.logger.info(aaiRequest);

executor.outFields.put("AAINamedQueryRequest", aaiRequest);

executor.getContextAlbum("ControlLoopExecutionIDAlbum").put(executor.executionId.toString(),
        executor.inFields.get("vnfID"));

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;
LE
result: SUCCESS

/root> 
/root> task create name=AAILookupResponseTask
result: SUCCESS

/root> 
/root> task inputfield create name=AAILookupResponseTask fieldName=AAINamedQueryResponse schemaName=AAIServiceNamedQueryResponseType
result: SUCCESS

/root> 
/root> task outputfield create name=AAILookupResponseTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=AAILookupResponseTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task contextref create name=AAILookupResponseTask albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> task contextref create name=AAILookupResponseTask albumName=ControlLoopExecutionIDAlbum
result: SUCCESS

/root> 
/root> task logic create name=AAILookupResponseTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vnfID = executor.getContextAlbum("ControlLoopExecutionIDAlbum").remove(executor.executionId.toString());

executor.logger.info("Continuing execution with VNF ID: " + vnfID);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(vnfID.toString());
executor.logger.info(vcpeClosedLoopStatus);

var aaiResponse = executor.inFields.get("AAINamedQueryResponse");

for (var iterator = aaiResponse.getInventoryResponseItems().iterator(); iterator.hasNext(); ) {
    var responseItem = iterator.next();
    
    if (responseItem.getModelName() != "vCPE") {
        continue;
    }
    
    var aaiInfo = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").getSchemaHelper().createNewSubInstance("VCPE_AAI_Type");

    aaiInfo.put("genericVnfResourceVersion",      responseItem.getGenericVnf().getResourceVersion());
    aaiInfo.put("genericVnfVnfName",              responseItem.getGenericVnf().getVnfName());
    aaiInfo.put("genericVnfProvStatus",           responseItem.getGenericVnf().getProvStatus());
    aaiInfo.put("genericVnfIsClosedLoopDisabled", responseItem.getGenericVnf().getIsClosedLoopDisabled());
    aaiInfo.put("genericVnfVnfType",              responseItem.getGenericVnf().getVnfType());
    aaiInfo.put("genericVnfInMaint",              responseItem.getGenericVnf().getInMaint());
    aaiInfo.put("genericVnfServiceId",            responseItem.getGenericVnf().getServiceId());
    aaiInfo.put("genericVnfVnfId",                responseItem.getGenericVnf().getVnfId());

    aaiInfo.put("genericVnfOrchestrationStatus",  responseItem.getVfModule().getOrchestrationStatus());

    vcpeClosedLoopStatus.put("AAI", aaiInfo);
    
    break;
}

// We should check here for the case where AAI returns an error or no data for the query


var uuidType = Java.type("java.util.UUID");
var requestID = uuidType.fromString(vcpeClosedLoopStatus.get("requestID"));

executor.outFields.put("requestID", requestID);
executor.outFields.put("vnfID", vnfID);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> task create name=NoAAILookupTask
result: SUCCESS

/root> 
/root> task inputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task inputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task outputfield create name=NoAAILookupTask fieldName=requestID schemaName=UUIDType
result: SUCCESS

/root> task outputfield create name=NoAAILookupTask fieldName=vnfID     schemaName=UUIDType
result: SUCCESS

/root> 
/root> task logic create name=NoAAILookupTask logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

executor.logger.info(executor.outFields);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # ReceiveEventPolicy
/root> # 
/root> policy create name=ReceiveEventPolicy template=Freestyle firstState=GetVCPEState
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=RequestAAIState triggerName=VCPEStateUpdatedEvent defaultTaskName=AAILookupRequestTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=RequestAAIStateOutput eventName=AAINamedQueryRequestEvent
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=AAILookupRequestTask outputType=DIRECT outputName=RequestAAIStateOutput
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=RequestAAIState outputName=DoNotRequestAAIStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=RequestAAIState taskName=NoAAILookupTask outputType=DIRECT outputName=DoNotRequestAAIStateOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=ReceiveEventPolicy stateName=RequestAAIState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=ReceiveEventPolicy stateName=RequestAAIState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());
var aaiInfo = vcpeClosedLoopStatus.get("AAI");

executor.logger.info(aaiInfo);

if (aaiInfo.get("genericVnfResourceVersion") != null
        && aaiInfo.get("genericVnfVnfName") != null
        && aaiInfo.get("genericVnfProvStatus") != null
        && aaiInfo.get("genericVnfIsClosedLoopDisabled") != null
        && aaiInfo.get("genericVnfOrchestrationStatus") != null
        && aaiInfo.get("genericVnfVnfType") != null
        && aaiInfo.get("genericVnfInMaint") != null
        && aaiInfo.get("genericVnfServiceId") != null
        && aaiInfo.get("genericVnfVnfId") != null) {
    executor.subject.getTaskKey("NoAAILookupTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("AAILookupRequestTask").copyTo(executor.selectedTask);
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=ReceiveEventPolicy stateName=GetVCPEState triggerName=VirtualControlLoopEvent defaultTaskName=GetVCPEStateTask
result: SUCCESS

/root> policy state output create name=ReceiveEventPolicy stateName=GetVCPEState outputName=GetVCPEStateOutput eventName=VCPEStateUpdatedEvent nextState=RequestAAIState
result: SUCCESS

/root> policy state taskref create name=ReceiveEventPolicy stateName=GetVCPEState taskName=GetVCPEStateTask outputType=DIRECT outputName=GetVCPEStateOutput
result: SUCCESS

/root> 
/root> #
/root> # AAIResponsePolicy
/root> # 
/root> policy create name=AAIResponsePolicy template=Freestyle firstState=AAIResponseState
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AbatedState outputName=AbatedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AbatedState taskName=ControlLoopLogTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=OnsetOrAbatedState triggerName=VCPEStateUpdatedEvent defaultTaskName=AbatedTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=OnsetOutput eventName=GuardRequestEvent
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=GuardRequestTask outputType=DIRECT outputName=OnsetOutput
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=OnsetOrAbatedState outputName=AbatedOutput eventName=VCPEStateUpdatedEvent nextState=AbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=OnsetOrAbatedState taskName=AbatedTask outputType=DIRECT outputName=AbatedOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=AAIResponsePolicy stateName=OnsetOrAbatedState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=AAIResponsePolicy stateName=OnsetOrAbatedState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var returnValue = executor.isTrue;

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var status = vcpeClosedLoopStatus.get("closedLoopEventStatus").toString();

var returnValue = executor.isTrue;

if (status === "ONSET") {
    executor.subject.getTaskKey("GuardRequestTask").copyTo(executor.selectedTask);
} else if (status === "ABATED") {
    executor.subject.getTaskKey("AbatedTask").copyTo(executor.selectedTask);
    onsetFlag = executor.isFalse;
} else {
    executor.message = "closedLoopEventStatus is \"" + status + "\", it must be either \"ONSET\" or \"ABATED\"";
    returnValue = executor.isFalse;
}

executor.logger.info("ReceiveEventPolicyOnsetOrAbatedStateTSL State Selected Task:" + executor.selectedTask);

LE
result: SUCCESS

/root> 
/root> policy state create name=AAIResponsePolicy stateName=AAIResponseState triggerName=AAINamedQueryResponseEvent defaultTaskName=AAILookupResponseTask
result: SUCCESS

/root> policy state output create name=AAIResponsePolicy stateName=AAIResponseState outputName=AAIResponseStateOutput eventName=VCPEStateUpdatedEvent nextState=OnsetOrAbatedState
result: SUCCESS

/root> policy state taskref create name=AAIResponsePolicy stateName=AAIResponseState taskName=AAILookupResponseTask outputType=DIRECT outputName=AAIResponseStateOutput
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCRequestPolicy
/root> # 
/root> policy create name=RestartAPPCRequestPolicy template=Freestyle firstState=PolicyGuardResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=DeniedState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=DeniedState outputName=DeniedOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=DeniedState taskName=ControlLoopLogTask outputType=DIRECT outputName=DeniedOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState triggerName=VCPEStateUpdatedEvent defaultTaskName=DeniedTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=PermitOutput eventName=APPCRestartVNFRequestEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=APPCRestartVNFRequestTask outputType=DIRECT outputName=PermitOutput
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState outputName=DenyOutput eventName=VCPEStateUpdatedEvent nextState=DeniedState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState taskName=DeniedTask outputType=DIRECT outputName=DenyOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState triggerName=GuardResponseEvent defaultTaskName=GuardResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState outputName=GuardResponseOutput eventName=VCPEStateUpdatedEvent nextState=PermitOrDenyState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCRequestPolicy stateName=PolicyGuardResponseState taskName=GuardResponseTask outputType=DIRECT outputName=GuardResponseOutput
result: SUCCESS

/root> 
/root> policy state contextref create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState albumName=VCPEClosedLoopStatusAlbum
result: SUCCESS

/root> 
/root> policy state selecttasklogic create name=RestartAPPCRequestPolicy stateName=PermitOrDenyState logicFlavour=JAVASCRIPT logic=LS
/*
 * ============LICENSE_START=======================================================
 *  Copyright (C) 2016-2018 Ericsson. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * ============LICENSE_END=========================================================
 */

executor.logger.info(executor.subject.id);
executor.logger.info(executor.inFields);

var vcpeClosedLoopStatus = executor.getContextAlbum("VCPEClosedLoopStatusAlbum").get(
        executor.inFields.get("vnfID").toString());

var guardResult = vcpeClosedLoopStatus.get("notification");

if (guardResult === "OPERATION: GUARD_PERMIT") {
    executor.subject.getTaskKey("APPCRestartVNFRequestTask").copyTo(executor.selectedTask);
} else {
    executor.subject.getTaskKey("DeniedTask").copyTo(executor.selectedTask);
}

executor.logger.info("RestartAPPCRequestPolicyPermitOrDenyTSL State Selected Task:" + executor.selectedTask);

var returnValue = executor.isTrue;

LE
result: SUCCESS

/root> 
/root> #
/root> # RestartAPPCResponsePolicy
/root> # 
/root> policy create name=RestartAPPCResponsePolicy template=Freestyle firstState=RestartAPPCResponseState
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=ResponseLogState triggerName=VCPEStateUpdatedEvent defaultTaskName=ControlLoopLogTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=ResponseLogState outputName=ResponseLogOutput eventName=ControlLoopLogEvent
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=ResponseLogState taskName=ControlLoopLogTask outputType=DIRECT outputName=ResponseLogOutput
result: SUCCESS

/root> 
/root> policy state create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState triggerName=APPCRestartVNFResponseEvent defaultTaskName=APPCRestartVNFResponseTask
result: SUCCESS

/root> policy state output create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState outputName=APPCRestartVNFResponseOutput eventName=VCPEStateUpdatedEvent nextState=ResponseLogState
result: SUCCESS

/root> policy state taskref create name=RestartAPPCResponsePolicy stateName=RestartAPPCResponseState taskName=APPCRestartVNFResponseTask outputType=DIRECT outputName=APPCRestartVNFResponseOutput
result: SUCCESS

/root> 
/root> validate
result: SUCCESS
{
   "apexArtifactKey" : {
      "name" : "ONAPvCPEPolicyModel",
      "version" : "0.0.1"
   }
}
***validation of model successful***

/root> 
/root> 