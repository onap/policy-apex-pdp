{
  "comments": [
    {
      "key": {
        "uuid": "b7c87a83_b1a3f29e",
        "filename": "services/services-onappf/src/main/java/org/onap/policy/apex/services/onappf/handler/ApexEngineHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-09-01T13:08:03Z",
      "side": 1,
      "message": "looks like we\u0027re essentially doing two decodes here: once into a String, stringValue, and then from there into a JsonObject.  Why not just invoke decode() for both steps, bypassing the need for the replace() calls?",
      "range": {
        "startLine": 94,
        "startChar": 12,
        "endLine": 96,
        "endChar": 53
      },
      "revId": "26b68aaf228c45205747d9d760b88d459c17e29a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38c8040f_9b277d10",
        "filename": "services/services-onappf/src/main/java/org/onap/policy/apex/services/onappf/handler/ApexEngineHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 5307
      },
      "writtenOn": "2020-09-02T04:59:21Z",
      "side": 1,
      "message": "Yes, the logic is truly a little bit wired, \nThe valueObject should be like this \"{\\r\\n \\\"example\\\" : example}\", The symbol \\r\\n should be deleted or it can not be decoded properly.\nThere is a function  \"StringEscapeUtils.unescapeJava(valueObject.toString().substring(1, length - 1))\" from package \"org.apache.commons.text.StringEscapeUtils\" which could solve this problem. \nShould we apply this package?",
      "parentUuid": "b7c87a83_b1a3f29e",
      "range": {
        "startLine": 94,
        "startChar": 12,
        "endLine": 96,
        "endChar": 53
      },
      "revId": "26b68aaf228c45205747d9d760b88d459c17e29a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46ea5378_47015e6d",
        "filename": "services/services-onappf/src/main/java/org/onap/policy/apex/services/onappf/handler/ApexEngineHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-09-02T12:50:45Z",
      "side": 1,
      "message": "right, but why bother using String operations to make it parseable?  The original value is basically created by double encoding, from object to json, and then from json to json again, so why not do the reverse?  Then you don\u0027t have to worry about making the string parseable, as it\u0027s already parseable by json (i.e., it\u0027s already a valid json string):\n\n  return coder.decode(coder.decode(valueObject.toString(), String.class), JsonObject.class)",
      "parentUuid": "38c8040f_9b277d10",
      "range": {
        "startLine": 94,
        "startChar": 12,
        "endLine": 96,
        "endChar": 53
      },
      "revId": "26b68aaf228c45205747d9d760b88d459c17e29a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5503873b_84068707",
        "filename": "services/services-onappf/src/main/java/org/onap/policy/apex/services/onappf/handler/ApexEngineHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 5307
      },
      "writtenOn": "2020-09-03T01:33:50Z",
      "side": 1,
      "message": "Yes, you are right. This is where the bug is. The valueObject is defined as a string in the system. But the system simply force to add a double quatation mark on valueObject no matter what it is. Often, the valueObject is a JsonObject, after the adding, it become a JsonPrimitive. So we have to delete it and return the string back. So now, it is a not a valid json and the decode do not work.\n\nExample: JsonPrimitive: \"\"{\\r\\n \\\"example\\\": example}\"\"",
      "parentUuid": "46ea5378_47015e6d",
      "range": {
        "startLine": 94,
        "startChar": 12,
        "endLine": 96,
        "endChar": 53
      },
      "revId": "26b68aaf228c45205747d9d760b88d459c17e29a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce5de556_f89416fe",
        "filename": "services/services-onappf/src/main/java/org/onap/policy/apex/services/onappf/handler/ApexEngineHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-09-03T12:57:02Z",
      "side": 1,
      "message": "right, so don\u0027t remove the enclosing quotes first - just replace all of lines 94-97 with the code I showed above.",
      "parentUuid": "5503873b_84068707",
      "range": {
        "startLine": 94,
        "startChar": 12,
        "endLine": 96,
        "endChar": 53
      },
      "revId": "26b68aaf228c45205747d9d760b88d459c17e29a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3888fe58_17f54b67",
        "filename": "services/services-onappf/src/main/java/org/onap/policy/apex/services/onappf/handler/ApexEngineHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 811
      },
      "writtenOn": "2020-09-01T13:08:03Z",
      "side": 1,
      "message": "the coder has a convert() method that can be used here to convert valueObject to a JsonObject",
      "revId": "26b68aaf228c45205747d9d760b88d459c17e29a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d66cd6c_a95371b0",
        "filename": "services/services-onappf/src/main/java/org/onap/policy/apex/services/onappf/handler/ApexEngineHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 5307
      },
      "writtenOn": "2020-09-02T04:59:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3888fe58_17f54b67",
      "revId": "26b68aaf228c45205747d9d760b88d459c17e29a",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}